}
chrom_idx <- 22
# get categorized als data
als_data <- fread(file = here(
als_floc,
paste0("als.sumstats.lmm.chr", chrom_idx, ".tmic.ps.csv"))
)
# deduplicate als data (artifact of double-counting exons and cds, utr, etc)
als_data <- als_data[!duplicated(als_data$snp), ]
# get snp categories
als_m6a_lof_data <- als_data[als_data$mut_cat == "m6a_lof", ]
als_m6a_gof_data <- als_data[als_data$mut_cat == "m6a_gof", ]
als_m5c_lof_data <- als_data[als_data$mut_cat == "m5c_lof", ]
als_other_data <- als_data[als_data$mut_cat == "other", ]
# clean to reduce overhead
rm(als_data)
rm(control_data)
# package into named list
output_classes <- c(
"other",
"m6a_lof",
"m5c_lof",
"m6a_gof"
)
current_df <- als_m6a_lof_data
current_type <- "control"
current_bins_gene <- bin_data_gene(
df = current_df,
ranges = gene_ranges,
chr = chrom_idx,
class = "m6a_lof",
type = current_type
)
current_bins_gene
View(current_bins_gene)
sum(current_bins_gene
$count)
sum(current_bins_gene[current_bins_gene$data_type == "als", ]$count)
current_bins_gene <- bin_data_gene(
df = current_df,
ranges = gene_ranges,
chr = chrom_idx,
class = "m6a_lof",
type = "als"
)
head(current_bins_gene$gene_id)
nrow(current_df[current_df$ensembl_gene_id == "ENSG00000100095", ])
current_bins_gene <- bin_data_gene(
df = current_df,
ranges = gene_ranges,
chr = chrom_idx,
class = "m6a_lof",
type = "als"
)
current_bins_gene <- bin_data_gene(
df = current_df,
ranges = gene_ranges,
chr = chrom_idx,
class = "m6a_lof",
type = "als"
)
current_bins_gene <- bin_data_gene(
df = current_df,
ranges = gene_ranges,
chr = chrom_idx,
class = "m6a_lof",
type = "als"
)
current_bins_gene <- bin_data_gene(
df = current_df,
ranges = gene_ranges,
chr = chrom_idx,
class = "m6a_lof",
type = "als"
)
bin_data_gene <- function(df, ranges, chr, class, type, chunk_size = 1e5) {
gene_chr <- ranges[seqnames(ranges) == paste0("chr", chr), ]
gene_chr <- sort(gene_chr)
igen <- gaps(gene_chr)
igen <- igen[strand(igen) == "*" & width(igen) > 0]
igen$gene_id <- paste0("igen_", seq_along(igen))
igen$gene_name <- "igen"
bins <- c(gene_chr, igen)
total_snps <- nrow(df)
message("Total SNPs: ", total_snps)
# Split SNPs into chunks
snp_chunks <- split(df, ceiling(seq_len(nrow(df)) / chunk_size))
message("Processing ", length(snp_chunks), " chunks...")
binned_list <- vector("list", length(snp_chunks))
for (i in seq_along(snp_chunks)) {
message("Chunk ", i, "/", length(snp_chunks))
snp_df <- snp_chunks[[i]]
message("nrow snps: ", nrow(snp_df))
message("yes")
snp_gr <- GRanges(
seqnames = paste0("chr", chr),
ranges = IRanges(start = snp_df$bp, end = snp_df$bp)
)
hits <- findOverlaps(snp_gr, bins)
if (length(hits) == 0L) next
snp_bin <- tibble(
bp = start(snp_gr)[queryHits(hits)],
gene_id = bins$gene_id[subjectHits(hits)],
gene_name = bins$gene_name[subjectHits(hits)]
)
binned_chunk <- snp_bin %>%
group_by(gene_id, gene_name) %>%
summarise(
count = n(),
bin_start = min(bp),
bin_end = max(bp),
.groups = "drop"
)
binned_list[[i]] <- binned_chunk
}
binned_data <- bind_rows(binned_list) %>%
group_by(gene_id, gene_name) %>%
summarise(
count = sum(count),
bin_start = min(bin_start),
bin_end = max(bin_end),
.groups = "drop"
) %>%
mutate(
chr = chr,
rel_freq = count / total_snps,
mut_class = class,
data_type = type
)
return(binned_data)
}
source(here("r_scripts", "analysis", "peak_calling_functions.R"))
bin_data_gene <- function(df, ranges, chr, class, type, chunk_size = 1e5) {
gene_chr <- ranges[seqnames(ranges) == paste0("chr", chr), ]
gene_chr <- sort(gene_chr)
igen <- gaps(gene_chr)
igen <- igen[strand(igen) == "*" & width(igen) > 0]
igen$gene_id <- paste0("igen_", seq_along(igen))
igen$gene_name <- "igen"
bins <- c(gene_chr, igen)
total_snps <- nrow(df)
message("Total SNPs: ", total_snps)
# Split SNPs into chunks
snp_chunks <- split(df, ceiling(seq_len(nrow(df)) / chunk_size))
message("Processing ", length(snp_chunks), " chunks...")
binned_list <- vector("list", length(snp_chunks))
for (i in seq_along(snp_chunks)) {
message("Chunk ", i, "/", length(snp_chunks))
snp_df <- snp_chunks[[i]]
message("nrow snps: ", nrow(snp_df))
message("yes")
snp_gr <- GRanges(
seqnames = paste0("chr", chr),
ranges = IRanges(start = snp_df$bp, end = snp_df$bp)
)
hits <- findOverlaps(snp_gr, bins)
if (length(hits) == 0L) next
snp_bin <- tibble(
bp = start(snp_gr)[queryHits(hits)],
gene_id = bins$gene_id[subjectHits(hits)],
gene_name = bins$gene_name[subjectHits(hits)]
)
binned_chunk <- snp_bin %>%
group_by(gene_id, gene_name) %>%
summarise(
count = n(),
bin_start = min(bp),
bin_end = max(bp),
.groups = "drop"
)
binned_list[[i]] <- binned_chunk
}
binned_data <- bind_rows(binned_list) %>%
group_by(gene_id, gene_name) %>%
summarise(
count = sum(count),
bin_start = min(bin_start),
bin_end = max(bin_end),
.groups = "drop"
) %>%
mutate(
chr = chr,
rel_freq = count / total_snps,
mut_class = class,
data_type = type
)
return(binned_data)
}
current_bins_gene <- bin_data_gene(
df = current_df,
ranges = gene_ranges,
chr = chrom_idx,
class = "m6a_lof",
type = "als"
)
source(here("r_scripts", "analysis", "peak_calling_functions.R"))
current_bins_gene <- bin_data_gene(
df = current_df,
ranges = gene_ranges,
chr = chrom_idx,
class = "m6a_lof",
type = "als"
)
source(here("r_scripts", "analysis", "peak_calling_functions.R"))
current_bins_gene <- bin_data_gene(
df = current_df,
ranges = gene_ranges,
chr = chrom_idx,
class = "m6a_lof",
type = "als"
)
source(here("r_scripts", "analysis", "peak_calling_functions.R"))
current_bins_gene <- bin_data_gene(
df = current_df,
ranges = gene_ranges,
chr = chrom_idx,
class = "m6a_lof",
type = "als"
)
source(here("r_scripts", "analysis", "peak_calling_functions.R"))
current_bins_gene <- bin_data_gene(
df = current_df,
ranges = gene_ranges,
chr = chrom_idx,
class = "m6a_lof",
type = "als"
)
countOverlaps(gene_ranges)
countOverlaps(gene_ranges, gene_ranges)
ov <- findOverlaps(gene_ranges, gene_ranges)
ov <- ov[queryHits(ov) != subjectHits(ov), ]
length(ov)
length(gene_ranges)
# get gtf for gene ranges
gtf <- fread(here("original_data", "hg38.ensGene.gtf"))
# collapse gtf to the gene level
genes <- gtf[gtf$func == "transcript"]
View(genes)
View(gtf)
# collapse gtf to the gene level
genes <- gtf[gtf$V3 == "transcript"]
View(genes)
rm(list = ls())
# load packages
suppressPackageStartupMessages(library(data.table))
suppressPackageStartupMessages(library(here))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(GenomicRanges))
suppressPackageStartupMessages(library(Biostrings))
suppressPackageStartupMessages(library(BSgenome.Hsapiens.UCSC.hg38))
source(here("r_scripts", "analysis", "peak_calling_functions.R"))
set.seed(123)
system("which zcat", intern = TRUE)
system("which awk", intern= TRUE)
# set parameters
num_chromosomes <- 22
genome_ref <- BSgenome.Hsapiens.UCSC.hg38
# initialize hg38 chr names in the vcf file
vcf_chr_names <- c(
"NC_000001.11",
"NC_000002.12",
"NC_000003.12",
"NC_000004.12",
"NC_000005.10",
"NC_000006.12",
"NC_000007.14",
"NC_000008.11",
"NC_000009.12",
"NC_000010.11",
"NC_000011.10",
"NC_000012.12",
"NC_000013.11",
"NC_000014.9",
"NC_000015.10",
"NC_000016.10",
"NC_000017.11",
"NC_000018.10",
"NC_000019.10",
"NC_000020.11",
"NC_000021.9",
"NC_000022.11"
)
# file locations
als_floc <- here("summary_statistics_tmic_ps")
vcf_loc <- here("original_data", "freq.vcf.gz")
# get gtf for gene ranges
gtf <- fread(here("original_data", "hg38.ensGene.gtf"))
colnames(gtf) <- c("seqnames", "source", "func", "start", "end", "str1", "str2", "str3", "gene_info")
# split gene info col
info_cols <- strsplit(gtf$gene_info, ";")
gtf$gene_id <- lapply(info_cols, "[[", 1)
# collapse gtf to the gene level
genes <- gtf[gtf$V3 == "transcript"]
gene_ranges <- genes %>%
as.data.frame() %>%
group_by(gene_id) %>%
summarise(start = min(start), end = max(end), seqnames = seqnames) %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE)
View(gene_ranges)
# collapse gtf to the gene level
genes <- gtf[gtf$V3 == "transcript"]
# get gtf for gene ranges
gtf <- fread(here("original_data", "hg38.ensGene.gtf"))
colnames(gtf) <- c("seqnames", "source", "func", "start", "end", "str1", "str2", "str3", "gene_info")
# split gene info col
info_cols <- strsplit(gtf$gene_info, ";")
gtf$gene_id <- lapply(info_cols, "[[", 1)
View(gtf)
# collapse gtf to the gene level
genes <- gtf[gtf$func == "transcript"]
View(genes)
typeof(genes)
genes_df <- as.data.frame(genes)
typeof(genes_df)
View(genes_df)
head(genes$gene_id)
gene_ranges <- genes %>%
group_by(gene_id) %>%
summarise(start = min(start), end = max(end), seqnames = seqnames) #%>%
View(gene_ranges)
head(gene_ranges$gene_id)
gene_ranges <- genes %>%
group_by(gene_id) %>%
summarise(start = min(start), end = max(end), seqnames = seqnames) %>%
distinct() %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE)
ovs <- findOverlaps(gene_ranges, gene_ranges)
ov <- ovs[queryHits(ovs) != subjectHits(ovs), ]
length(ov)
length(gene_ranges)
gene_ranges <- genes %>%
group_by(gene_id) %>%
summarise(start = min(start), end = max(end), seqnames = seqnames) %>%
distinct() #%>%
View(gene_ranges)
head(gene_ranges, n = 10)
gaps(gene_ranges)
gene_ranges <- genes %>%
group_by(gene_id) %>%
summarise(start = min(start), end = max(end), seqnames = seqnames) %>%
distinct() %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE)
gaps(gene_ranges)
View(genes_df)
?gaps
genes_reduced <- reduce(gene_ranges)
gaps(genes_reduced)
?reduce
gaps(genes_reduced, ignore.strand = TRUE)
genes_reduced <- reduce(gene_ranges, ignore.strand = TRUE)
gaps(genes_reduced)
# remove gtf strandedness because ???
gtf$str1 <- NULL
gtf$str2 <- NULL
gtf$str3 <- NULL
# split gene info col
info_cols <- strsplit(gtf$gene_info, ";")
# get gtf for gene ranges
gtf <- fread(here("original_data", "hg38.ensGene.gtf"))
colnames(gtf) <- c("seqnames", "source", "func", "start", "end", "str1", "str2", "str3", "gene_info")
# remove gtf strandedness because ???
gtf$str1 <- NULL
gtf$str2 <- NULL
gtf$str3 <- NULL
# split gene info col
info_cols <- strsplit(gtf$gene_info, ";")
gtf$gene_id <- lapply(info_cols, "[[", 1)
# collapse gtf to the gene level
genes <- gtf[gtf$func == "transcript"]
gene_ranges <- genes %>%
group_by(gene_id) %>%
summarise(start = min(start), end = max(end), seqnames = seqnames) %>%
distinct() %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE)
reduced <- reduce(gene_ranges, ignore.strand = TRUE)
gaps(reduced)
dummy_ranges <- ranges(gene_ranges)
View(dummy_ranges)
View(genes_df)
source(here("r_scripts", "analysis", "peak_calling_functions.R"))
chrom_idx <- 22
# bootstrapping params
bin_size <- 1e5
num_bootstraps <- 1000
# helper function to get GRanges from peaks bed file
get_peaks <- function(type) {
df <- fread(file = here("original_data", "m6as_m5cs", paste0("merged_", type, "_peaks.bed")))
# handle differences in chr naming conventions
if (type == "m6a") seqnames_to_use = df$V1
else if (type == "m5c") seqnames_to_use = paste0("chr", df$V1)
GRanges(
seqnames = seqnames_to_use,
ranges = IRanges(start = df$V2, end = df$V3)
)
}
m6a_peaks_gr <- get_peaks("m6a")
m5c_peaks_gr <- get_peaks("m5c")
# helper function to get snps of different mutation classes
get_class_snps <- function(data_df, data_gr, peaks_gr, allele) {
hits <- findOverlaps(data_gr, peaks_gr, type = "within")
data_df <- data_df[queryHits(hits), ]
data_df <- data_df[data_df$a1 == allele, ]
return(data_df)
}
rm(list = ls())
# load packages
suppressPackageStartupMessages(library(data.table))
suppressPackageStartupMessages(library(here))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(GenomicRanges))
suppressPackageStartupMessages(library(Biostrings))
suppressPackageStartupMessages(library(BSgenome.Hsapiens.UCSC.hg38))
source(here("r_scripts", "analysis", "peak_calling_functions.R"))
set.seed(123)
system("which zcat", intern = TRUE)
system("which awk", intern= TRUE)
# set parameters
num_chromosomes <- 22
genome_ref <- BSgenome.Hsapiens.UCSC.hg38
# initialize hg38 chr names in the vcf file
vcf_chr_names <- c(
"NC_000001.11",
"NC_000002.12",
"NC_000003.12",
"NC_000004.12",
"NC_000005.10",
"NC_000006.12",
"NC_000007.14",
"NC_000008.11",
"NC_000009.12",
"NC_000010.11",
"NC_000011.10",
"NC_000012.12",
"NC_000013.11",
"NC_000014.9",
"NC_000015.10",
"NC_000016.10",
"NC_000017.11",
"NC_000018.10",
"NC_000019.10",
"NC_000020.11",
"NC_000021.9",
"NC_000022.11"
)
# file locations
als_floc <- here("summary_statistics_tmic_ps")
vcf_loc <- here("original_data", "freq.vcf.gz")
# get gtf for gene ranges
gtf <- fread(here("original_data", "hg38.ensGene.gtf"))
colnames(gtf) <- c("seqnames", "source", "func", "start", "end", "str1", "str2", "str3", "gene_info")
# remove gtf strandedness because ???
gtf$str1 <- NULL
gtf$str2 <- NULL
gtf$str3 <- NULL
# split gene info col
info_cols <- strsplit(gtf$gene_info, ";")
gtf$gene_id <- lapply(info_cols, "[[", 1)
# collapse gtf to the gene level
genes <- gtf[gtf$func == "transcript"]
gene_ranges <- genes %>%
group_by(gene_id) %>%
summarise(start = min(start), end = max(end), seqnames = seqnames) %>%
distinct() %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE)
# bootstrapping params
bin_size <- 1e5
num_bootstraps <- 1000
# helper function to get GRanges from peaks bed file
get_peaks <- function(type) {
df <- fread(file = here("original_data", "m6as_m5cs", paste0("merged_", type, "_peaks.bed")))
# handle differences in chr naming conventions
if (type == "m6a") seqnames_to_use = df$V1
else if (type == "m5c") seqnames_to_use = paste0("chr", df$V1)
GRanges(
seqnames = seqnames_to_use,
ranges = IRanges(start = df$V2, end = df$V3)
)
}
# helper function to get snps of different mutation classes
get_class_snps <- function(data_df, data_gr, peaks_gr, allele) {
hits <- findOverlaps(data_gr, peaks_gr, type = "within")
data_df <- data_df[queryHits(hits), ]
data_df <- data_df[data_df$a1 == allele, ]
return(data_df)
}
chrom_idx <- 22
# get categorized als data
als_data <- fread(file = here(
als_floc,
paste0("als.sumstats.lmm.chr", chrom_idx, ".tmic.ps.csv"))
)
# deduplicate als data (artifact of double-counting exons and cds, utr, etc)
als_data <- als_data[!duplicated(als_data$snp), ]
# get snp categories
als_m6a_lof_data <- als_data[als_data$mut_cat == "m6a_lof", ]
als_m6a_gof_data <- als_data[als_data$mut_cat == "m6a_gof", ]
als_m5c_lof_data <- als_data[als_data$mut_cat == "m5c_lof", ]
als_other_data <- als_data[als_data$mut_cat == "other", ]
# package into named list
output_classes <- c(
"other",
"m6a_lof",
"m5c_lof",
"m6a_gof"
)
bins <- bin_data_gene(
df = als_m6a_lof_data,
ranges = gene_ranges,
chr = chrom_idx,
class = "m6a_lof",
type = "als"
)
